import React from 'react';
import { motion } from 'framer-motion';
import { useTheme } from '@/contexts/ThemeContext';
import { AnalysisResult } from '@/services/analysisService';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

interface DetailedAnalysisReportProps {
  analysis: AnalysisResult;
  onClose: () => void;
}

export const DetailedAnalysisReport: React.FC<DetailedAnalysisReportProps> = ({ analysis, onClose }) => {
  const { theme } = useTheme();

  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    let yOffset = 20;

    // Add header
    doc.setFontSize(24);
    doc.setTextColor(139, 92, 246);
    doc.text('DeepFake Analysis Report', pageWidth / 2, yOffset, { align: 'center' });
    yOffset += 15;

    // Add timestamp
    doc.setFontSize(12);
    doc.setTextColor(100);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth / 2, yOffset, { align: 'center' });
    yOffset += 20;

    // Add video information
    doc.setFontSize(16);
    doc.setTextColor(0);
    doc.text('Video Information', 20, yOffset);
    yOffset += 15;

    doc.setFontSize(12);
    doc.text(`Video Name: ${analysis.videoName}`, 20, yOffset);
    yOffset += 10;
    doc.text(`Analysis Date: ${new Date(analysis.timestamp).toLocaleString()}`, 20, yOffset);
    yOffset += 20;

    // Add prediction with color
    doc.setFontSize(16);
    doc.text('Analysis Summary', 20, yOffset);
    yOffset += 15;

    doc.setFontSize(14);
    const predictionColor = analysis.prediction === 'Real' ? [40, 167, 69] : [220, 53, 69];
    doc.setTextColor(predictionColor[0], predictionColor[1], predictionColor[2]);
    doc.text(`Prediction: ${analysis.prediction}`, 20, yOffset);
    yOffset += 15;

    // Add confidence score
    doc.setTextColor(0);
    doc.text(`Confidence Score: ${analysis.confidence}%`, 20, yOffset);
    yOffset += 20;

    // Add detailed analysis
    doc.setFontSize(16);
    doc.text('Detailed Analysis', 20, yOffset);
    yOffset += 15;

    // Add justification
    doc.setFontSize(12);
    const splitText = doc.splitTextToSize(analysis.justification || 'No detailed analysis available.', pageWidth - 40);
    doc.text(splitText, 20, yOffset);
    yOffset += splitText.length * 7 + 20;

    // Add frame analysis if available
    if (analysis.frameProbs && analysis.frameProbs.length > 0) {
      if (yOffset > pageHeight - 50) {
        doc.addPage();
        yOffset = 20;
      }

      doc.setFontSize(16);
      doc.text('Frame Analysis', 20, yOffset);
      yOffset += 15;

      const tableData = analysis.frameProbs.map((probs, index) => [
        `Frame ${index + 1}`,
        `${(probs[0] * 100).toFixed(2)}%`,
        `${(probs[1] * 100).toFixed(2)}%`
      ]);

      autoTable(doc, {
        startY: yOffset,
        head: [['Frame', 'Real Probability', 'Fake Probability']],
        body: tableData,
        theme: 'grid',
        headStyles: { fillColor: [139, 92, 246] },
        styles: { fontSize: 10 },
        margin: { left: 20 }
      });
    }

    // Add footer
    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(100);
      doc.text(
        'Generated by DeepFake Detection System',
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
      doc.text(
        `Page ${i} of ${totalPages}`,
        pageWidth / 2,
        pageHeight - 5,
        { align: 'center' }
      );
    }

    doc.save(`deepfake_analysis_${analysis.videoName.replace(/\.[^/.]+$/, '')}.pdf`);
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className={`fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4`}
    >
      <motion.div
        initial={{ scale: 0.95, y: 20 }}
        animate={{ scale: 1, y: 0 }}
        exit={{ scale: 0.95, y: 20 }}
        className={`w-full max-w-4xl max-h-[90vh] overflow-y-auto ${
          theme === 'dark' ? 'bg-gray-900' : 'bg-white'
        } rounded-2xl shadow-2xl`}
      >
        <div className="p-6">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 text-transparent bg-clip-text">
              Detailed Analysis Report
            </h2>
            <button
              onClick={onClose}
              className={`p-2 rounded-lg ${theme === 'dark' ? 'hover:bg-white/10' : 'hover:bg-gray-100'}`}
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Content */}
          <div className="space-y-6">
            {/* Video Information */}
            <div className={`p-4 rounded-xl ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'}`}>
              <h3 className="text-lg font-semibold mb-2">Video Information</h3>
              <p className={`${theme === 'dark' ? 'text-white/60' : 'text-gray-600'}`}>
                Name: {analysis.videoName}
              </p>
              <p className={`${theme === 'dark' ? 'text-white/60' : 'text-gray-600'}`}>
                Analyzed on: {new Date(analysis.timestamp).toLocaleString()}
              </p>
            </div>

            {/* Analysis Summary */}
            <div className={`p-4 rounded-xl ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'}`}>
              <h3 className="text-lg font-semibold mb-2">Analysis Summary</h3>
              <div className="flex items-center gap-4">
                <span className={`px-4 py-2 rounded-full ${
                  analysis.prediction === 'Real' 
                    ? 'bg-green-500/20 text-green-400' 
                    : 'bg-red-500/20 text-red-400'
                }`}>
                  {analysis.prediction}
                </span>
                <span className="text-xl font-semibold">{analysis.confidence}% Confidence</span>
              </div>
            </div>

            {/* Detailed Analysis */}
            <div className={`p-4 rounded-xl ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'}`}>
              <h3 className="text-lg font-semibold mb-2">Detailed Analysis</h3>
              <p className={`${theme === 'dark' ? 'text-white/60' : 'text-gray-600'}`}>
                {analysis.justification}
              </p>
            </div>

            {/* Frame Analysis */}
            {analysis.frameProbs && analysis.frameProbs.length > 0 && (
              <div className={`p-4 rounded-xl ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'}`}>
                <h3 className="text-lg font-semibold mb-4">Frame Analysis</h3>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className={`${theme === 'dark' ? 'bg-white/5' : 'bg-gray-100'}`}>
                        <th className="p-2 text-left">Frame</th>
                        <th className="p-2 text-left">Real Probability</th>
                        <th className="p-2 text-left">Fake Probability</th>
                      </tr>
                    </thead>
                    <tbody>
                      {analysis.frameProbs.map((probs, index) => (
                        <tr key={index} className={`${theme === 'dark' ? 'border-white/10' : 'border-gray-200'} border-b`}>
                          <td className="p-2">Frame {index + 1}</td>
                          <td className="p-2 text-green-500">{(probs[0] * 100).toFixed(2)}%</td>
                          <td className="p-2 text-red-500">{(probs[1] * 100).toFixed(2)}%</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex justify-end gap-4">
              <button
                onClick={handleDownloadPDF}
                className="px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-xl hover:from-purple-600 hover:to-pink-600 transition-all duration-300"
              >
                Download PDF Report
              </button>
            </div>
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
}; 